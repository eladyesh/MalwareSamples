#include <Windows.h>
#include <iostream>
#include <Aclapi.h>

int main() {
    LPCWSTR filename = L"virus.exe";
    DWORD attributes = GetFileAttributes(filename);
    if (attributes != INVALID_FILE_ATTRIBUTES) {
        // Set the file to read-only
        attributes |= FILE_ATTRIBUTE_READONLY;
        if (SetFileAttributes(filename, attributes) == 0) {
            // Handle error
            std::cerr << "Error setting file attributes: " << GetLastError() << std::endl;
            return 1;
        }

        // Remove execute permission from all users
        EXPLICIT_ACCESS ea = { 0 };
        PACL pNewDACL = NULL;
        DWORD dwRes;

        // Create an EXPLICIT_ACCESS structure for the new ACE.
        ZeroMemory(&ea, sizeof(EXPLICIT_ACCESS));
        ea.grfAccessPermissions = GENERIC_READ;
        ea.grfAccessMode = DENY_ACCESS;
        ea.grfInheritance = SUB_CONTAINERS_AND_OBJECTS_INHERIT;
        ea.Trustee.TrusteeForm = TRUSTEE_IS_NAME;
        ea.Trustee.TrusteeType = TRUSTEE_IS_USER;
        ea.Trustee.ptstrName = L"Everyone";

        // Get the existing DACL.
        dwRes = GetNamedSecurityInfo(filename, SE_FILE_OBJECT, DACL_SECURITY_INFORMATION,
            NULL, NULL, &pNewDACL, NULL, NULL);
        if (dwRes != ERROR_SUCCESS) {
            // Handle error
            std::cerr << "Error getting security info: " << dwRes << std::endl;
            return 1;
        }

        // Add the new ACE to the existing DACL.
        dwRes = SetEntriesInAcl(1, &ea, pNewDACL, &pNewDACL);
        if (dwRes != ERROR_SUCCESS) {
            // Handle error
            std::cerr << "Error adding ACE to DACL: " << dwRes << std::endl;
            return 1;
        }

        // Set the new DACL.
        dwRes = SetNamedSecurityInfo(filename, SE_FILE_OBJECT, DACL_SECURITY_INFORMATION,
            NULL, NULL, pNewDACL, NULL);
        if (dwRes != ERROR_SUCCESS) {
            // Handle error
            std::cerr << "Error setting security info: " << dwRes << std::endl;
            return 1;
        }

        std::cout << "File " << filename << " is now read-only and unexecutable." << std::endl;
    }
    else {
        // Handle error
        std::cerr << "Error getting file attributes: " << GetLastError() << std::endl;
        return 1;
    }
    int x;
    std::cin >> x;
    return 0;
}
